import openai

API_KEY = ""
client = openai.OpenAI(api_key=API_KEY)

role_messages = {"role": "system",
                 "content": ""}

content = """
"""

print("Для завершения ввести 0\n")

while True:
    message = [role_messages]
    user_input = input("Команда: ")

    if user_input == '0':
        break

    message.append({"role": "user", "content": content + user_input})

    print(message)

    response = client.chat.completions.create(
        # model="gpt-3.5-turbo",
        # model="gpt-4.1",
        model="gpt-4.1-nano",
        # model="gpt-4.1-mini",
        # model="o4-mini",
        # model="gpt-4o",
        # model="o3",
        # model="gpt-4o-mini",
        messages=message
    )

    reply = response.choices[0].message.content
    print(f"{reply}\n", '---------------------------\n', '\n')

# создай список покупок
# напомни забрать цветы завтра в 11 часов
# плоскогубцы на 3 полке
# Таких не берут в космонавты запиши это в фильмы
# добавь в список словнов самовар
# расскажи что в кладовке
# что в покупках
# что надо купить
# найди в фильмах боевик про монстров
# найди в напоминаниях заметку в которой указано время 18:00 и количество 3
# как гнать самогон
# замени эту заметку на тут новый текст
# удали
# найди в кладовке записи со словом молоток
# сколько записей в кладовке
# посчитай сумму в записях покупок
# найди в покупках где цена больше 5
# покажи все вчерашние заметки
# покажи сумму цен всех вчерашних заметок
# покажи сумму вчерашних расходов
# сумма расходов за этот месяц
# что на 7 полке в кладовке
# какой фильм про роботов посмотреть
# фильм который рассказывает об истории англии
# фильм 2024 года
# какой нибудь фильм 2024 года
# интересные вещи в кладовке
# все вчерашние расходы
# что купить
# расходы в этом месяце
# сумма расходов за прошлый год
# лучшее блюдо на ужин
# сколько стоил билет на поезд купленный вчера
# позавчера мы покупали бургеры сколько они стоили
# недавно мы что то в фастфуде брали скажи цену

"""
Найди заметку, прочитай заметку, процитируй заметку, 
Открой заметку, посмотри заметку, покажи заметку

Инструменты поиска:
- фильтр (указаны конкретные значения: список, дата создания (время), цена, количество, номер, рейтинг, текст) -> filter
- семантический поиск (не четкий критерий поиска) -> semantic

Инструменты представления результатов:
- прочитать результаты (если в запросе уточняется, что результат нужно прочитать, процитировать, найти...) -> read
- пропустить через LLM -> (конкретно не указано как вернуть результат) -> llm
- агрегирующая функция, затем LLM (указана агрегирующая функция: сумма, среднее, мин, макс, количество) -> aggregate





Способ поиска заметки зависит от остального запроса
Если указывается конкретные фильтры то они применяются первыми:
список, дата создания, цена, количество, номер, рейтинг, текст


После фильтра может идти агрегирующая функция:



"""

"""
7. Поиск
Поисковый запрос это любая фраза, не подходящая под другие команды.
В "action" записываем слово "search".
Если он содержит конкретные фильтры то вместо "query" используется "filter": 
{    
    "action": "search filter ..."
    "filter":
        {
            "text": пример слова или фразы четко указанный в запросе, например: "найди заметку со словом самокат" - "самокат", 
            "price": сумма/цена "<"/">"/"=" (int/float), 
            "date": промежуток от (если указано), до (если указано), дата/время (dd.mm.YYYY H:m), например "01.01.2025 00:00 - 05.01.2015 00:00" или " - 05.01.2015 00:00" или "01.01.2025 00:00 - "
            "quantity": количество "<"/">"/"=" (int/float)
            "rating": рейтинг "<"/">"/"=" (int/float)
            "number": номер или цифра которую нельзя отнести к имеющимся "<"/">"/"=" (int/float)
        }
    "list_name": ...
}
а в поле "action" через пробел добавляем слово "filter" иначе,
если фильтров нет - то в "query" просто текст запроса, а в "action" "semantic" вместо "filter".
Цифровые поля в фильтре записываются со знаком "<"/">"/"=" + число 

В поле "action" через пробел добавляем окончательный обработчик только один:
- если в запросе уточняется, что результат нужно прочитать, процитировать, найти, перечислить т тд) -> "read" (например: расходы за месяц)
- конкретно не указано как вернуть результат -> "llm" (например: у нас есть расходы за месяц)
- если пользователь явно хочет посчитать результат и говорит слова: сумма, среднее, мин, макс, количество -> "aggregate" + "sum"/"avg"/"min"/"max"/"quantity" (например: сумма за месяц - тут слово "сумма")

"""

